# If not running interactively, don't do anything
[[ -z "$PS1" ]] && return

export HISTCONTROL=ignoredups:ignorespace
export HISTFILESIZE=10000
export HISTSIZE=10000
# export HISTIGNORE='ls:ll'

shopt -s checkwinsize
shopt -s histappend

# Prompt
__RESET_COLOR="[00;00m"
__RED="[00;31m"
__GREEN="[00;32m"
__YELLOW="[00;33m"
__BLUE="[00;34m"
__PURPLE="[00;35m"
__CYAN="[00;36m"
__MAGENTA="[00;95m"
__BOLD_RED="[01;31m"
__BOLD_GREEN="[01;32m"
__BOLD_BLUE="[01;34m"
__BOLD_CYAN="[01;36m"

if [[ $(id -u) == '0' ]] || sudo -n true 2>/dev/null; then
  __USER_COLOR=$__BOLD_RED
else
  __USER_COLOR=$__BOLD_GREEN
fi

if [[ -n "${SSH_CLIENT-}${SSH2_CLIENT-}${SSH_TTY-}" ]]; then
    __HOST_COLOR=$__BOLD_CYAN
else
    __HOST_COLOR=$__BOLD_GREEN
fi

function _prompt_lastcommandfailed {
  code=$?
  if [[ $code != 0 ]]; then
    echo -ne " \e${__RED}ℯ$code"
  fi
}

# Prints "(VIRTUALENV)" if one is active.
export CONDA_CHANGEPS1=0
export VIRTUAL_ENV_DISABLE_PROMPT=1
function _prompt_venv {
    if [[ -n "$VIRTUAL_ENV" ]]; then
        echo -ne "\e${__RESET_COLOR} ("
        echo -ne "\e${__PURPLE}${VIRTUAL_ENV##*/}"
        echo -ne "\e${__RESET_COLOR})"
    fi

    if [[ -n "$CONDA_DEFAULT_ENV" && "$CONDA_DEFAULT_ENV" != 'base' ]]; then
        echo -ne "\e${__RESET_COLOR} ("
        echo -ne "\e${__CYAN}${CONDA_DEFAULT_ENV}"
        echo -ne "\e${__RESET_COLOR})"
    fi
}

function _prompt_time {
    echo -en "\e${__YELLOW}[$(date '+%H:%M')]\e${__RESET_COLOR}"
}

# export VCP_BRANCH="{blue}⌥{value}{reset}"
function _prompt_vc_status {
    if hash vcprompt &>/dev/null; then
        echo -n "$(vcprompt)"
        # echo -n "$(vcprompt --minimal)"
    fi
}

PROMPT_COMMAND='\
LAST_CMD_FAILED="$(_prompt_lastcommandfailed)";\
TIME="$(_prompt_time)";\
VC_STATUS="$(_prompt_vc_status)";\
VENV="$(_prompt_venv)";'

# Prompt
PS1='\[\033[G\]'  # http://jonisalonen.com/2012/your-bash-prompt-needs-this/
PS1+='\n'                       # empty line above prompt
PS1+='$TIME '                   # current time
PS1+='\e${__USER_COLOR}\u'      # user
PS1+='\e${__RESET_COLOR}@'      # @
PS1+='\e${__HOST_COLOR}\h'      # host
PS1+='\e${__RESET_COLOR}:'      # :
PS1+='\e${__BOLD_BLUE}\w'       # cwd
PS1+='\e${__RESET_COLOR}'
PS1+='${VC_STATUS}'             # repo stats
PS1+='${VENV}'                  # venv
PS1+='${LAST_CMD_FAILED}'       # exit code
# PS1+='\e${__RESET_COLOR}\n$ '   # \n❯
PS1+='\[\e${__RESET_COLOR}\]\n\[\e${__BLUE}\]❯\[\e${__CYAN}\]❯\[\e${__GREEN}\]❯\[\e${__RESET_COLOR}\] '
PS2='\[\e${__PURPLE}\].\[\e${__MAGENTA}\].\[\e${__RED}\].\[\e${__RESET_COLOR}\] '

# make less more friendly for non-text input files, see lesspipe(1)
[[ -x /usr/bin/lesspipe ]] && eval "$(SHELL=/bin/sh lesspipe)"

# enable color support of ls and also add handy aliases
if [[ -x /usr/bin/dircolors ]]; then
    # test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
fi
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# https://geoff.greer.fm/lscolors/
export LSCOLORS=ExGxFxDxCxHxHxacagaeaf
export LS_COLORS="di=1;34:ln=1;36:so=1;35:pi=1;33:ex=1;32:bd=1;37:cd=1;37:su=30;42:sg=30;46:tw=30;44:ow=30;45"

# OS X color terminal
export CLICOLOR=1

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
    # Ubuntu
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        source /usr/share/bash-completion/bash_completion
    # Ubuntu
    elif [ -f /etc/bash_completion ]; then
        source /etc/bash_completion
    # macOS Homebrew
    if [ -f /usr/local/share/bash-completion/bash_completion ]; then
        . /usr/local/share/bash-completion/bash_completion
    fi
fi

# pip configuration and bash completion
_pip_completion()
{
    COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                   COMP_CWORD=$COMP_CWORD \
                   PIP_AUTO_COMPLETE=1 $1 ) )
}
complete -o default -F _pip_completion pip

# Python start-up and virtualenv wrapper
export PYTHONSTARTUP=$HOME/.pythonrc
export WORKON_HOME=$HOME/.virtualenvs
export VIRTUALENVWRAPPER_PYTHON="$(type -P /usr/local/bin/python3 || type -P /usr/bin/python3)"
venwrap=$(type -P virtualenvwrapper.sh)
if [[ $venwrap != '' ]]; then
    . $venwrap
fi

# Load autojump if installed
if [[ -s /usr/share/autojump/autojump.bash ]]; then  # Ubuntu
    . /usr/share/autojump/autojump.bash
elif [[ -s /usr/local/etc/profile.d/autojump.sh ]]; then  # homebrew
    . /usr/local/etc/profile.d/autojump.sh
fi

# Alias definitions.
if [[ -f ~/.bash_aliases ]]; then
    . ~/.bash_aliases
fi

# Source stuff from secret private directory ...
if [[ -d ~/.private ]]; then
    . ~/.private/bash_aliases.sh
fi
