"""
This file is executed when the Python interactive shell is started if
$PYTHONSTARTUP is in your environment and points to this file. It's just
regular Python commands, so do what you will. Your ~/.inputrc file can greatly
complement this file.

"""
import os
import sys


# Colored prompt
if os.getenv('TERM') in ('xterm', 'vt100', 'rxvt', 'Eterm', 'putty'):
    # ('xterm-color', 'xterm-256color', 'linux', 'screen', 'screen-256color',
    # 'screen-bce')
    try:
        import readline
    except ImportError:
        sys.ps1 = '\033[0;32m>>> \033[0m'
        sys.ps2 = '\033[0;31m... \033[0m'
    else:
        sys.ps1 = '\001\033[0;32m\002>>> \001\033[0m\002'
        sys.ps2 = '\001\033[0;31m\002... \001\033[0m\002'


# Completion
try:
    import readline
except ImportError:
    print("Module readline not available.")
else:
    # persistent history
    histfile = os.path.expanduser('~/.pyhistory')
    try:
        readline.read_history_file(histfile)
    except IOError:
        pass
    import atexit
    atexit.register(readline.write_history_file, histfile)
    del histfile, atexit
    # tab completion
    try:
        sys.path.append(os.path.join(os.getenv('HOME'), '.python'))
        import rlcompleter_ng
        rlcompleter_ng.setup()
        del rlcompleter_ng
    except ImportError:
        import rlcompleter
        readline.parse_and_bind('tab: complete')
        del rlcompleter
    del readline


# Enable Pretty Printing for stdout"""
def my_displayhook(value):
    if value is not None:
        try:
            import __builtin__
            __builtin__._ = value
        except ImportError:
            __builtins__._ = value

        import pprint
        pprint.pprint(value)
        del pprint

sys.displayhook = my_displayhook
del my_displayhook


del sys
del os
